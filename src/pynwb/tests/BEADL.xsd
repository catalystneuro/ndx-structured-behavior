<?xml version="1.1"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">

<xs:element name="BEADL">
    <xs:complexType>
        <xs:sequence>
            <xs:element name="BeadlTrialProtocol" type="BeadlTrialProtocolType"/>
            <xs:element name="BeadlEditor" type="BeadlEditorType" minOccurs ="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="version" type="xs:string" use="required"/>
    </xs:complexType>
</xs:element>

<xs:complexType name="BeadlTrialProtocolType">
    <xs:sequence>
        <xs:element name="BeadlArguments">
            <xs:complexType>
                <xs:sequence>
                    <xs:element name="BeadlArgument" minOccurs ="0" maxOccurs="unbounded">
                        <xs:complexType>
                            <xs:attribute name="name" type="xs:string" use="required"/>
                            <xs:attribute name="expression" type="xs:string" use="optional"/>
                            <xs:attribute name="type" use="optional">
                                <xs:simpleType>
                                    <xs:restriction base="xs:string">
                                        <xs:enumeration value="logical" />
                                        <xs:enumeration value="numeric" />
                                    </xs:restriction>
                                </xs:simpleType>
                            </xs:attribute>
                            <xs:attribute name="comment" type="xs:string" use="optional"/>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
            </xs:complexType>
        </xs:element>
        <xs:element name="HardwareSettings" type="HardwareSettingsType"/>
        <xs:element name="BeadlInputs" type="BeadlInputsType"/>
        <xs:element name="BeadlActions" type="BeadlActionsType"/>
        <xs:element name="BeadlStates" type="BeadlStatesType"/>
        <xs:element name="BeadlStateTransitions" type="BeadlStateTransitionsType"/>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="startState" type="xs:string" use="required"/>
    <xs:attribute name="numberOfTrials" type="xs:double" use="required"/>
</xs:complexType>


<xs:complexType name="HardwareSettingsType">
    <xs:sequence>
        <xs:element name="ConnectionMapping" minOccurs ="0" maxOccurs="unbounded">
            <xs:complexType>
                <xs:sequence>
                    <xs:element name="Value" minOccurs ="0" maxOccurs="1" type="xs:string" />
                    <xs:element name="Dependency" minOccurs ="0" maxOccurs="1" type="DependencyType" />
                </xs:sequence>
                <xs:attribute name="name" type="xs:string" use="required"/>
                <xs:attribute name="resourceName" type="xs:string" use="required"/>
                <xs:attribute name="type" type="xs:string" use="required"/>
            </xs:complexType>
        </xs:element>
    </xs:sequence>
    <xs:attribute name="hardware" type="xs:string" use="required"/>
    <xs:attribute name="version" type="xs:string" use="required"/>
    <xs:attribute name="lang" type="xs:string" use="optional"/>
</xs:complexType>

<!-- Definition of BeadlInputs -->
<xs:complexType name="BeadlInputsType">
    <xs:choice maxOccurs="unbounded"> <!-- xs:sequence defines the order and xs:all can't work with unbounded numbers-->
        <xs:element name="HardwareInput" minOccurs ="0" maxOccurs="unbounded">
            <xs:complexType>
                <xs:all>
                    <xs:element name="Dependency" minOccurs ="0" maxOccurs="1" type="DependencyType" />
                </xs:all>
                <xs:attribute name="name" type="xs:string" use="required"/>
                <xs:attribute name="connection" type="xs:string" use="required"/>
                <xs:attribute name="type" type="xs:string" use="optional"/>
                <xs:attribute name="comment" type="xs:string" use="optional"/>
            </xs:complexType>
        </xs:element>
        <xs:element name="VirtualInput" minOccurs ="0" maxOccurs="unbounded">
            <xs:complexType>
                <xs:all>
                    <xs:element name="Dependency" minOccurs ="0" maxOccurs="1" type="DependencyType" />
                </xs:all>
                <xs:attribute name="name" type="xs:string" use="required"/>
                <xs:attribute name="connection" type="xs:string" use="required"/>
                <xs:attribute name="type" type="xs:string" use="optional"/>
                <xs:attribute name="comment" type="xs:string" use="optional"/>
            </xs:complexType>
        </xs:element>
    </xs:choice>
</xs:complexType>

<!-- Definition of BeadlActions -->
<xs:complexType name="BeadlActionsType">
    <xs:sequence>
        <xs:element name="HardwareAction" minOccurs ="0" maxOccurs="unbounded">
            <xs:complexType>
                <xs:all>
                    <xs:element name="Dependency" minOccurs ="0" maxOccurs="1" type="DependencyType" />
                </xs:all>
                <xs:attribute name="name" type="xs:string" use="required"/>
                <xs:attribute name="connection" type="xs:string" use="required"/>
                <xs:attribute name="type" type="xs:string" use="optional"/>
                <xs:attribute name="comment" type="xs:string" use="optional"/>
            </xs:complexType>
        </xs:element>
        <xs:element name="VirtualAction" minOccurs ="0" maxOccurs="unbounded">
            <xs:complexType>
                <xs:all>
                    <xs:element name="Dependency" minOccurs ="0" maxOccurs="1" type="DependencyType" />
                </xs:all>
                <xs:attribute name="name" type="xs:string" use="required"/>
                <xs:attribute name="connection" type="xs:string" use="required"/>
                <xs:attribute name="type" type="xs:string" use="optional"/>
                <xs:attribute name="comment" type="xs:string" use="optional"/>
            </xs:complexType>
        </xs:element>
    </xs:sequence>
</xs:complexType>

<xs:complexType name="BeadlStatesType">
    <xs:sequence>
        <xs:element name="BeadlState" minOccurs ="1" maxOccurs="unbounded">
            <xs:complexType>
                <xs:sequence>
                    <xs:element name="StateTimer" type="xs:string" default="0" />
                    <xs:element name="StateOutputActions">
                        <xs:complexType>
                            <xs:choice minOccurs="0" maxOccurs="unbounded">
                                <!-- Definition of OutputAction-->
                                <xs:element name="OutputAction">
                                    <xs:complexType>
                                        <xs:simpleContent>
                                            <xs:extension base="xs:string">
                                                <xs:attribute name="action" type="xs:string" use="required"/>
                                                <xs:attribute name="value" type="xs:string" use="required"/>
                                            </xs:extension>
                                        </xs:simpleContent>
                                    </xs:complexType>
                                </xs:element>

                                <!-- Definition of OutputAction-->
                                <xs:element name="SetVariableAction">
                                    <xs:complexType>
                                        <xs:simpleContent>
                                            <xs:extension base="xs:string">
                                                <xs:attribute name="action" type="xs:string" use="required"/>
                                                <xs:attribute name="expression" type="xs:string" use="required"/>
                                            </xs:extension>
                                        </xs:simpleContent>
                                    </xs:complexType>
                                </xs:element>
                            </xs:choice>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="StateEvents">
                        <xs:complexType>
                            <xs:choice minOccurs="0" maxOccurs="unbounded">

                                <!-- Definition of TimerEvent-->
                                <xs:element name="TimerEvent">
                                    <xs:complexType>
                                        <xs:attribute name="timer" type="xs:string" use="required"/>
                                        <xs:attribute name="eventname" type="xs:string" use="required"/>
                                    </xs:complexType>
                                </xs:element>

                                <!-- Definition of ExternalEvent-->
                                <xs:element name="ExternalEvent">
                                    <xs:complexType>
                                        <xs:simpleContent>
                                            <xs:extension base="xs:string">
                                                <xs:attribute name="source" type="xs:string" use="required"/>
                                                <xs:attribute name="eventname" type="xs:string" use="required"/>
                                                <xs:attribute name="value" type="xs:string" use="required"/>
                                                <xs:attribute name="gracePeriod" type="xs:double" use="optional"/>
                                            </xs:extension>
                                        </xs:simpleContent>
                                    </xs:complexType>
                                </xs:element>

                                <!-- Definition of ArgumentEvent-->
                                <xs:element name="ArgumentEvent">
                                    <xs:complexType>
                                        <xs:simpleContent> <!-- ToDo: don't know if it needs to be like this since it has no content -->
                                            <xs:extension base="xs:string">
                                                <xs:attribute name="eventname" type="xs:string" use="required"/>
                                                <xs:attribute name="source" type="xs:string" use="required"/>
                                                <xs:attribute name="expression" type="xs:string" use="required"/>
                                            </xs:extension>
                                        </xs:simpleContent>
                                    </xs:complexType>
                                </xs:element>

                                <!-- Definition of VariableEvent-->
                                <xs:element name="VariableEvent">
                                    <xs:complexType>
                                        <xs:simpleContent>
                                            <xs:extension base="xs:string">
                                                <xs:attribute name="eventname" type="xs:string" use="required"/>
                                                <xs:attribute name="source" type="xs:string" use="required"/>
                                                <xs:attribute name="expression" type="xs:string" use="required"/>
                                            </xs:extension>
                                        </xs:simpleContent>
                                    </xs:complexType>
                                </xs:element>

                                <!-- Definition of TimeSpanEvent-->
                                <xs:element name="TimeSpanEvent">
                                    <xs:complexType>
                                        <xs:simpleContent>
                                            <xs:extension base="xs:string">
                                                <xs:attribute name="eventname" type="xs:string" use="required"/>
                                                <xs:attribute name="source" type="xs:string" use="required"/>
                                                <xs:attribute name="expression" type="xs:string" use="required"/>
                                            </xs:extension>
                                        </xs:simpleContent>
                                    </xs:complexType>
                                </xs:element>
                                
                                <!-- Definition of VirtualEvent - a more generic way of dealing with virtual events!-->
                                <xs:element name="VirtualEvent">
                                    <xs:complexType>
                                        <xs:simpleContent>
                                            <xs:extension base="xs:string">
                                                <xs:attribute name="eventname" type="xs:string" use="required"/>
                                                <xs:attribute name="eventType" type="xs:string" use="required"/>
                                                <xs:attribute name="source" type="xs:string" use="required"/>
                                            </xs:extension>
                                        </xs:simpleContent>
                                    </xs:complexType>
                                </xs:element>

                            </xs:choice>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="Dependency" minOccurs ="0" maxOccurs="1" type="DependencyType" />
                </xs:sequence>
                <xs:attribute name="name" type="xs:string" use="required"/>
            </xs:complexType>
        </xs:element>
    </xs:sequence>
</xs:complexType>

<xs:complexType name="BeadlStateTransitionsType">
    <xs:sequence>
        <xs:element name="BeadlStateTransition" minOccurs ="1" maxOccurs="unbounded">
            <xs:complexType>
                <xs:all>
                    <xs:element name="Dependency" minOccurs ="0" maxOccurs="1" type="DependencyType" />
                </xs:all>
                <xs:attribute name="from" type="xs:string" use="required"/>
                <xs:attribute name="to" type="xs:string" use="required"/>
                <xs:attribute name="eventname" type="xs:string" use="required"/>
                <xs:attribute name="label" type="xs:string" use="optional"/>
            </xs:complexType>
        </xs:element>
    </xs:sequence>
</xs:complexType>

<xs:complexType name="DependencyType">
    <xs:attribute name="type" use="required" >
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="BeadlArgumentDependency" />
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="expression" type="xs:string" use="required"/>
</xs:complexType>

<xs:complexType name="BeadlEditorType">
    <!-- Not implemented yet, should just have a placeholde for an SVG!?! -->
</xs:complexType>
</xs:schema>